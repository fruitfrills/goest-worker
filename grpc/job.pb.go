// Code generated by protoc-gen-go. DO NOT EDIT.
// source: job.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	job.proto

It has these top-level messages:
	JobRPC
	ArgReflect
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JobRPC struct {
	Name string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id   string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Args []*ArgReflect `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *JobRPC) Reset()                    { *m = JobRPC{} }
func (m *JobRPC) String() string            { return proto.CompactTextString(m) }
func (*JobRPC) ProtoMessage()               {}
func (*JobRPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobRPC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobRPC) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobRPC) GetArgs() []*ArgReflect {
	if m != nil {
		return m.Args
	}
	return nil
}

type ArgReflect struct {
	Type  uint32               `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value *google_protobuf.Any `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ArgReflect) Reset()                    { *m = ArgReflect{} }
func (m *ArgReflect) String() string            { return proto.CompactTextString(m) }
func (*ArgReflect) ProtoMessage()               {}
func (*ArgReflect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArgReflect) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ArgReflect) GetValue() *google_protobuf.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*JobRPC)(nil), "grpc.JobRPC")
	proto.RegisterType((*ArgReflect)(nil), "grpc.argReflect")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Master service

type MasterClient interface {
	AddSlave(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc1.CallOption) (*google_protobuf1.Empty, error)
	JobStream(ctx context.Context, opts ...grpc1.CallOption) (Master_JobStreamClient, error)
}

type masterClient struct {
	cc *grpc1.ClientConn
}

func NewMasterClient(cc *grpc1.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) AddSlave(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc1.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc1.Invoke(ctx, "/grpc.Master/AddSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) JobStream(ctx context.Context, opts ...grpc1.CallOption) (Master_JobStreamClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Master_serviceDesc.Streams[0], c.cc, "/grpc.Master/JobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterJobStreamClient{stream}
	return x, nil
}

type Master_JobStreamClient interface {
	Send(*JobRPC) error
	Recv() (*JobRPC, error)
	grpc1.ClientStream
}

type masterJobStreamClient struct {
	grpc1.ClientStream
}

func (x *masterJobStreamClient) Send(m *JobRPC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterJobStreamClient) Recv() (*JobRPC, error) {
	m := new(JobRPC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Master service

type MasterServer interface {
	AddSlave(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	JobStream(Master_JobStreamServer) error
}

func RegisterMasterServer(s *grpc1.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_AddSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AddSlave(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Master/AddSlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AddSlave(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_JobStream_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(MasterServer).JobStream(&masterJobStreamServer{stream})
}

type Master_JobStreamServer interface {
	Send(*JobRPC) error
	Recv() (*JobRPC, error)
	grpc1.ServerStream
}

type masterJobStreamServer struct {
	grpc1.ServerStream
}

func (x *masterJobStreamServer) Send(m *JobRPC) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterJobStreamServer) Recv() (*JobRPC, error) {
	m := new(JobRPC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Master_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "AddSlave",
			Handler:    _Master_AddSlave_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "JobStream",
			Handler:       _Master_JobStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "job.proto",
}

func init() { proto.RegisterFile("job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xd7, 0xae, 0x16, 0x7b, 0xa7, 0x22, 0x17, 0x91, 0x5a, 0x5f, 0x46, 0xf1, 0xa1, 0x08,
	0x66, 0x52, 0x5f, 0x7d, 0x19, 0xe2, 0xcb, 0x50, 0x90, 0xec, 0x17, 0x24, 0xeb, 0x5d, 0x98, 0xb4,
	0x4d, 0xc9, 0xd2, 0x41, 0xff, 0xbd, 0x34, 0x51, 0x44, 0xc5, 0xb7, 0x9b, 0x73, 0x6e, 0xbe, 0x7b,
	0x0e, 0x24, 0xef, 0x5a, 0xb2, 0xce, 0x68, 0xab, 0x31, 0x52, 0xa6, 0xdb, 0x64, 0x57, 0x4a, 0x6b,
	0x55, 0xd3, 0xc2, 0x69, 0xb2, 0xdf, 0x2e, 0x44, 0x3b, 0xf8, 0x85, 0xec, 0xfa, 0xb7, 0x45, 0x4d,
	0x67, 0x3f, 0xcd, 0x9c, 0x43, 0xbc, 0xd2, 0x92, 0xbf, 0x3d, 0x21, 0x42, 0xd4, 0x8a, 0x86, 0xd2,
	0x60, 0x1e, 0x14, 0x09, 0x77, 0x33, 0x9e, 0x41, 0xb8, 0xab, 0xd2, 0xd0, 0x29, 0xe1, 0xae, 0xc2,
	0x1b, 0x88, 0x84, 0x51, 0xfb, 0x74, 0x3a, 0x9f, 0x16, 0xb3, 0xf2, 0x9c, 0x8d, 0xa7, 0x99, 0x30,
	0x8a, 0xd3, 0xb6, 0xa6, 0x8d, 0xe5, 0xce, 0xcd, 0x5f, 0x00, 0xbe, 0xb5, 0x91, 0x6b, 0x87, 0xce,
	0x73, 0x4f, 0xb9, 0x9b, 0xf1, 0x16, 0x8e, 0x0e, 0xa2, 0xee, 0xc9, 0xa1, 0x67, 0xe5, 0x05, 0xf3,
	0x11, 0xd9, 0x57, 0x44, 0xb6, 0x6c, 0x07, 0xee, 0x57, 0xca, 0x1e, 0xe2, 0x57, 0xb1, 0xb7, 0x64,
	0xf0, 0x11, 0x8e, 0x97, 0x55, 0xb5, 0xae, 0xc5, 0x81, 0xf0, 0xf2, 0xcf, 0x97, 0xe7, 0xb1, 0x55,
	0xf6, 0x8f, 0x9e, 0x4f, 0xf0, 0x0e, 0x92, 0x95, 0x96, 0x6b, 0x6b, 0x48, 0x34, 0x78, 0xe2, 0xa3,
	0xfb, 0xea, 0xd9, 0x8f, 0x57, 0x3e, 0x29, 0x82, 0xfb, 0x40, 0xc6, 0x0e, 0xf0, 0xf0, 0x11, 0x00,
	0x00, 0xff, 0xff, 0x50, 0xe7, 0x46, 0x12, 0x6a, 0x01, 0x00, 0x00,
}
